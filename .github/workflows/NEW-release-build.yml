#
# Copyright 2020 New Relic Corporation. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#

#
# This is the workflow to do a release build.
# GHA: 04/07: This is actually replacing the php-release-agent job in jenkins.
# We do not need the php-release-agent-checkout job.
#
---

name: 'NEW release_CI (php-release-agent)'

#
# Control when the action will run.
#
on:
  # GHA only using this for testing
  push:
    branches:
      # - gha-testing
      - gha-dev
      - dev
      - main
  #
  # Run this workflow manually from the Actions tab or using the API
  #
  workflow_dispatch:

jobs:
  # GHA might be better to create sperarate jobs per image?
  # GHA creat a matrix value for the various images
  # agent_release:
  #   env:
  #     # GHA we need to add the various PHP versions supported to PHP_VER
  #     PHP_VER: ${{ matrix.php_ver }}
  #     ARCH: ${{ matrix.arch }}
  #     BUILD_TYPE: release
  #     OS: ${{ matrix.os }}
  #     image_name: ${{ matrix.os }}:${{ matrix.php_ver }}${{ matrix.arch }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       os: [linux]
  #       php_ver: ['7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.0-zts']
  #       # GHA we'll need to exclude some combinations I believe
  #       # Check the arch for the new docker images
  #       arch: [x64, x86]
  #   steps:
  #     - name: Checkout PHP Agent Repo
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.event.client_payload.ref }}
  #     # GHA No need to build these images? everything should be installed
  #     - name: Build Custom Docker Image
  #       run: docker build --build-arg ARCH=$ARCH --build-arg PHP_VER=$PHP_VER --build-arg BUILD_TYPE=$BUILD_TYPE -f ./.github/docker/${OS}/${ARCH}/Dockerfile -t $image_name .
  #     - name: Build and Test
  #       run: docker run --name runtest --workdir /github/workspace --rm -e GITHUB_WORKSPACE -e GITHUB_ENV -v "${GITHUB_WORKSPACE}":"/github/workspace" $image_name
  #     - name: Save build artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{ matrix.php_ver }}binaries
  #         path: releases
  #         if-no-files-found: error

  # GHA: it might be prudent to break thes jobs up per OS
  # It might be a little convoluted to be checking for OS and then
  # script as required in a single job.
  agent_release_by_image:
    env:
      # GHA we need to add the various PHP versions supported to PHP_VER
      # Confirm that these are passed to the container(s)
      PHP_VER: ${{ matrix.php_ver }}
      ARCH: ${{ matrix.arch }}
      BUILD_TYPE: release
      OS: ${{ matrix.os }}
      image_name: ${{ matrix.os }}:${{ matrix.php_ver }}${{ matrix.arch }}
      IMAGE_OS: ${{ matrix.image_os }}
    runs-on: ubuntu-latest
    container:  ## GHA: testing using private docker image
      image: ${{ matrix.registry }}/${{ matrix.image_os }}
      credentials:
        username: ${{ secrets.DOCKER_REPO_USER }}
        password: ${{ secrets.DOCKER_USER_TOKEN }}
    strategy:
      matrix:
        registry: [mycirrus]
        # image_os: ['newrelic:nr-centos8-1.1', 'newrelic:nr-centos7-1.2', 'newrelic:nr-alpine-3.14--1.2', 'newrelic:nr-alpine3.4-1.1']
        image_os: ['newrelic:nr-centos8-1.1', 'newrelic:nr-alpine3.4-1.1']
        os: [linux]
        # php_ver: ['7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.0-zts']
        php_ver: ['7.0']
        # GHA we'll need to exclude some combinations I believe
        # Check the arch for the new docker images
        arch: [x64]
    steps:
      # GHA: We need to also checkout the build script repo
      # Per Amber, run the source command for eavh version of PHP:
      # source [WHEREVERYOUPUTBUILDSCRIPTS]/php-build-scripts/bin/phpvm.bash change <PHP_VER>
      # New workflow_trigger action section

      - name: Checkout PHP Agent Repo
        uses: actions/checkout@v3
        with:
          # ref: ${{ github.event.client_payload.ref }}
          ref: gha-dev

      - name: Checkout build scripts repository
        uses: actions/checkout@v3
        with:
          repository: newrelic/php-agent-php-build-scripts
          # Chaging ref temporarily for testing
          # ref: master
          ref: gha-dev
          # GHA: Check for token
          token: ${{ secrets.ACTIONS_TOKEN }}
          path: php-build-scripts

      # This might have to exist within ".github"
      # GHA No need to build these images? everything should be installed
      # - name: Build Custom Docker Image
      #   run: docker build --build-arg ARCH=$ARCH --build-arg PHP_VER=$PHP_VER --build-arg BUILD_TYPE=$BUILD_TYPE -f ./.github/docker/${OS}/${ARCH}/Dockerfile -t $image_name .
      - name: Check the workspace
        run: |
          echo "current directory is " $(pwd)
          ls -la

      - name: Check php-build-scripts
        run: |
          echo "current directory is " $(pwd)
          ls -la php-build-scripts/

      # - name: Build and Test
      #   run: |
      #     echo "current directory is " $(pwd)
      #     ls -la
      #     cd / && ls -la
      #     ls -la opt/nr/
      #     ls -la github/

      # GHA: This step shouldn't be necessary with the phpvm.bash
      - name: Add the "opt/nr" path, install packages
        run: |
          echo "/opt/nr/php/${PHP_VER}/bin" >> $GITHUB_PATH
          echo "/opt/nr/php/${PHP_VER}/bin/phpize" >> $GITHUB_PATH
          echo "/opt/nr/php/${PHP_VER}/bin/php-config" >> $GITHUB_PATH

      # GHA: Spme path issues need resolving
      # GHA: We may have to run this and build-release in same step
      - name: 'Test call phpvm.bash, then build-release.sh'
        # if: ${{ matrix.image_os == 'newrelic:nr-centos8-1.0' || matrix.image_os == 'newrelic:nr-centos7-1.1' }}
        # if: ${{ matrix.arch == 'x64' }}
        run: |
          set -x
          echo "Calling phpvm.bash"
          source php-build-scripts/bin/phpvm.bash change ${{ matrix.php_ver }}
          echo "Where is phpize?"
          find / -name phpize
          whereis phpize
          echo "Calling release_build.sh"
          ./.github/docker/linux/release_build.sh

      # - name: 'Test call phpvm.bash, then build-release.sh - Alpine'
      #   if: ${{ matrix.image_os == 'newrelic:nr-alpine3.4-1.0' }}
      #   # if: ${{ matrix.arch == 'x64' }}
      #   run: |
      #     cd "${GITHUB_WORKSPACE}"
      #     set -x
      #     echo "Calling phpvm.bash"
      #     source php-build-scripts/bin/phpvm.bash change ${{ matrix.php_ver }}
      #     echo "Where is phpize?"
      #     find / -name phpize
      #     whereis phpize
      #     echo "Calling release_build.sh"
      #     ./.github/docker/linux/release_build_alpine_testing.sh

      - name: Check content of releases directory
        # if: ${{ matrix.image_os == 'newrelic:nr-centos8-1.0' && matrix.arch == 'x64' }}
        # if: ${{ matrix.arch == 'x64' }}
        run: |
          tree releases/
          ls -laR releases/

      # - name: Test call of release_build.sh
      #   if: ${{ matrix.image_os == 'newrelic:nr-centos8-1.0' && matrix.arch == 'x64' }}
      #   run: |
      #     echo "This is CentOS 8, calling release_build.sh"
      #     ./.github/docker/linux/release_build.sh

      # Check ENV variables
      # GHA: Check for IMAGE_OS value per matix run
      - name: Check environmental variables
        if: ${{ always() }}
        run: printenv | sort -f

      # GHA: below fails
      # - name: Dump Env Context
      #   run: echo env is ${{ toJSON(env) }}

      # Rename matrix item to remove problem characers
      # GHA only required for custom artifact naming
      - name: Rename Matrix item
        if: ${{ failure() || success() }}
        env:
          MATRIX_IMAGE: ${{ matrix.image_os }}
        run: |
          MATRIX_IMAGE=$(echo ${MATRIX_IMAGE} | sed 's|:|-|g')
          echo "MATRIX_IMAGE="${MATRIX_IMAGE}"" >> $GITHUB_ENV


      # GHA: We need to find a more efficient way of saving these
      # Will we have to download abd comine as done in the following step?
      # Or the aggregation can happen in workflows?
      - name: Save build artifacts
        # if: ${{ matrix.image_os == 'newrelic:nr-centos8-1.0' && matrix.arch == 'x64' }}
        # if: ${{ matrix.arch == 'x64' }}
        uses: actions/upload-artifact@v2
        with:
          # name: ${{ matrix.php_ver }}binaries
          # name: ${{ env.MATRIX_IMAGE }}-${{ matrix.php_ver }}-${{ matrix.arch }}binaries
          # path: releases
          name: ${{ env.MATRIX_IMAGE }}-${{ matrix.php_ver }}-${{ matrix.arch }}binaries
          path: releases/
          if-no-files-found: error

  # GHA renamed for better readability â‡“
  combine-artifacts:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Combine artifacts from matrix build
    needs: agent_release_by_image
    steps:
      # - name: Dump Env Context
      #   run: echo env is ${{ toJSON(env) }}

      - name: Create directory
        run: mkdir releases

      - name: Download to directory
        uses: actions/download-artifact@v2
        with:
          path: releases
      # - run: sudo apt install tree

      - run: |
          tree releases/
          cd releases/
          mkdir alpine centos arm64
          ls -la
          # cp -R newrelic-nr-alpine*/* alpine/
          # cp -R newrelic-nr-centos*/* centos/
          # rm -rf newrelic-nr-alpine*/ newrelic-nr-centos*/
          # cp -R newrelic-nr-arm64*/* arm64/
          # tree releases/

      - name: Consolidate per OS
        # if: ${{ always() }}
        run: |
          cd releases/
          cp -R newrelic-nr-alpine*/* alpine/
          cp -R newrelic-nr-centos*/* centos/
          rm -rf newrelic-nr-alpine*/ newrelic-nr-centos*/
          cd ../ && mv releases combined-releases
          tree combined-releases/

      # GHA: Note the format of GitHub variable reference in contexts
      # UNDERSCORE REPLACED WITH . SYNTAX
      # Github "scope"
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: combined-releases-${{ github.sha }}
          path: combined-releases/
          if-no-files-found: error
