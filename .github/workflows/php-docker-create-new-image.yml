name: php-docker-create-new-image

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # push:
  #   branches: [ gha-testing ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      VERSION:
        description: "PHP Agent version"
        required: true
        default: ''
        type: string
      VERSION_SHORT:
        description: "The short version. If the full version is 10.1.0.589 then the short version is 10.1.0"
        required: true
        default: ''
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  php-docker-create-new-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # container:  ## kds = testing using private docker image
    #   image: kentonshade/mycirrus_1:ubuntu-focal-starter
    #   credentials:
    #      username: ${{ secrets.DOCKER_REPO_USER }}
    #      password: ${{ secrets.DOCKER_USER_PASS }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # - uses: actions/checkout@v2

      - name: Checkout PHP Deployment Repo   ## NOT POSSIBLE as of 05/13/2021 from GHE
        uses: actions/checkout@v2
        with:
          repository: newrelic/newrelic-php-daemon-docker
          ref: master
          # GHA Confirm we can (this works), and should use this token for this
          # purpose
          token: ${{ secrets.API_CLI_TOKEN }}
          # path: <path>

      # Call update-docker-image.bash
      # GHA testing the script
      - name: Call update-docker-image.bash
        run: |
          chmod +x ./tools/update-docker-image.bash
          ./tools/update-docker-image.bash ${{ inputs.VERSION }}
          # cat ./tools/update-docker-image.bash

      # GHA testing the script - grab status
      - name: git status
        run: |
          git status -sb

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          pwd && ls -la
          echo Add other actions to build,
          echo test, and deploy your project.
          lsb_release -a
