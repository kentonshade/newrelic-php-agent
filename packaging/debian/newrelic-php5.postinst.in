#!/bin/sh
# postinst script for newrelic-php5
#
# see: dh_installdeb(1)

. /usr/share/debconf/confmodule

# Insert the contents of newrelic-php5.config here.
#COMMON#

# Common to both initial and upgrade installs
if [ ! -d /var/log/newrelic ]; then
  install -d -m 0755 -o root -g root /var/log/newrelic > /dev/null 2>&1
fi

mydir=/usr/lib/newrelic-php5

# If /usr/sbin/phpquery is available, we're in the new world with the potential
# for parallel PHP package installations. On the bright side, we can use
# phpquery to enumerate what's available.
if is_phpquery_available; then
  db_get newrelic-php5/license-key
  LICENSE_KEY="$RET"

  db_get newrelic-php5/application-name
  APPLICATION_NAME="$RET"

  # At present, the Xenial php7.0 packages are using /etc/php/mods-available
  # for no apparent reason. Let's spray a configuration file there too if we
  # need to. (This has to happen before we call install_agent_to_new_package,
  # as that calls phpenmod which expects a configuration file in
  # /etc/php/mods-available on Xenial only.
  if [ -d /etc/php/mods-available ]; then
    if [ ! -f /etc/php/mods-available/newrelic.ini ]; then
      python3 "$mydir/scripts/install/configure" "$LICENSE_KEY" "$APPLICATION_NAME" < "$mydir/scripts/newrelic.ini.template" > /etc/php/mods-available/newrelic.ini
    fi
  fi

  for version in $(/usr/sbin/phpquery -V); do
    install_agent_to_new_package "$version" "$mydir"
  done

  echo 'Please restart your Web server(s) to complete installation.' 1>&2
elif is_php5_packaged; then
  arch=$(get_architecture)

  # If the user has a php5-common package installed, then we'll do an install
  # based on that.
  pdir=
  if [ -d /usr/lib/php5 ]; then
    pdir=/usr/lib/php5
  elif [ -d /usr/lib64/php5 ]; then
    pdir=/usr/lib64/php5
    if [ "${arch}" = "x86" ]; then
      pdir=
    fi
  fi

  # Put the extension in the correct place.
  if [ -n "${arch}" -a -n "${pdir}" -a -n "${mydir}" -a -d ${mydir} ]; then
    for api in $PHP_API_VERSIONS; do
      if [ -d ${pdir}/${api} ]; then
        rm -f ${pdir}/${api}/newrelic.so > /dev/null 2>&1
        ln -s ${mydir}/agent/${arch}/newrelic-${api}.so ${pdir}/${api}/newrelic.so > /dev/null 2>&1
      fi
      if [ -d "${pdir}/${api}+lfs" ]; then
        rm -f "${pdir}/${api}+lfs/newrelic.so" > /dev/null 2>&1
        ln -s ${mydir}/agent/${arch}/newrelic-${api}.so "${pdir}/${api}+lfs/newrelic.so" > /dev/null 2>&1
      fi
    done

    # For deprecated versions, we copy instead of link so that the file the link
    # points to doesn't go away if the user inadvertently updates.
    for api in $DEPRECATED_PHP_API_VERSIONS; do
      if [ -d ${pdir}/${api} ]; then
        rm -f ${pdir}/${api}/newrelic.so > /dev/null 2>&1
        cp ${mydir}/agent/${arch}/newrelic-${api}.so ${pdir}/${api}/newrelic.so > /dev/null 2>&1
      fi
      if [ -d "${pdir}/${api}+lfs" ]; then
        rm -f "${pdir}/${api}+lfs/newrelic.so" > /dev/null 2>&1
        cp ${mydir}/agent/${arch}/newrelic-${api}.so "${pdir}/${api}+lfs/newrelic.so" > /dev/null 2>&1
      fi
    done

    if needs_config; then
      db_get newrelic-php5/license-key
      LICENSE_KEY="$RET"

      db_get newrelic-php5/application-name
      APPLICATION_NAME="$RET"

      python3 ${mydir}/scripts/install/configure "$LICENSE_KEY" "$APPLICATION_NAME" < ${mydir}/scripts/newrelic.ini.template > "$CONFIG_PATH"

      if [ -x /usr/sbin/php5enmod ]; then
        /usr/sbin/php5enmod newrelic
      fi

      # Let's not try to guess whether the user is using apache, nginx,
      # lighttpd, litespeed, or something else.
      echo 'Please restart your Web server(s) to complete installation.' 1>&2
    elif are_newrelic_ini_files_consistent; then
      # Nothing needs to happen; just print the message.
      echo 'Please restart your Web server(s) to complete installation.' 1>&2
    else
      # Inconsistent files: tell the user and don't overwrite anything.
      echo 'You have differing newrelic.ini files in /etc/php5. If this is unintended,' 1>&2
      echo 'please find the newrelic.ini that contains the correct license key and' 1>&2
      echo 'application name, copy it over the other newrelic.ini files, and run' 1>&2
      echo 'newrelic-install as root to complete installation.' 1>&2
    fi
  # We only want to output a message to users who are performing fresh
  # installations, rather than upgrades. We can detect that by seeing if a
  # previous version number was given to the script.
  elif [ -z "$2" ]; then
    echo 'Please run newrelic-install as root to complete installation.' 1>&2
  fi
else
  # We only want to output a message to users who are performing fresh
  # installations, rather than upgrades. We can detect that by seeing if a
  # previous version number was given to the script.
  if [ -z "$2" ]; then
    echo 'Please run newrelic-install as root to complete installation.' 1>&2
  fi
fi

#DEBHELPER#

exit 0
